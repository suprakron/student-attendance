import React, { useState } from 'react';
import * as XLSX from 'xlsx';
import '../assets/styles/AddStudents.css';
const AddStudents = () => {
    const [studentId, setStudentId] = useState('');
    const [FirstName, setFirstName] = useState('');
    const [LastName, setLastName] = useState('');
    const [classlevel, setclasslevel] = useState('');

    const handleAddStudent = async (e) => {
        e.preventDefault();
        if (!FirstName || !LastName || !classlevel || !studentId) {
            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö');
            return;
        }

       try {
      const response = await fetch('http://localhost:4000/api/students', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: studentId.trim(),
          firstname: FirstName.trim(),
          lastname: LastName.trim(),
          classlevel: classlevel.trim(),
        }),
      });

      if (!response.ok) throw new Error('Failed to add student');

      alert('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      setStudentId('');
      setFirstName('');
      setLastName('');
      setclasslevel('');
    } catch (err) {
      console.error('Error:', err);
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ');
    }     
    };
const handleFileUpload = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = async (event) => {
        const data = new Uint8Array(event.target.result);
        const workbook = XLSX.read(data, { type: 'array' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet);

        try {
            const uploadPromises = jsonData.map((student) => {
                const newStudent = {
                    id: String(student.id).trim(),
                    firstname: String(student.firstname || student.firstName).trim(),
                    lastname: String(student.lastname).trim(),
                    classlev: String(student.classlevel || student.classlev).trim(),
                };

                // üîÅ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend SQLite
                return fetch('http://localhost:5000/api/students', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(newStudent),
                });
            });

            await Promise.all(uploadPromises);
            alert('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Excel ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');
        } catch (err) {
            console.error('Upload error:', err);
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
        }
    };

    reader.readAsArrayBuffer(file);
};

    return (
        <div className="add-student-container">
            <h2 className="title">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h2>
            <form className="student-form" onSubmit={handleAddStudent}>
                <input
                    className="input-field"
                    type="text"
                    placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
                    value={studentId}
                    onChange={(e) => setStudentId(e.target.value)}
                />
                <input
                    className="input-field"
                    type="text"
                    placeholder="‡∏ä‡∏∑‡πà‡∏≠"
                    value={FirstName}
                    onChange={(e) => setFirstName(e.target.value)}
                />
                <input
                    className="input-field"
                    type="text"
                    placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                    value={LastName}
                    onChange={(e) => setLastName(e.target.value)}
                />
                <select
                    className="input-field"
                    value={classlevel}
                    onChange={(e) => setclasslevel(e.target.value)}
                >
                    <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô --</option>
                    {["‡∏°.1/1", "‡∏°.1/2", "‡∏°.1/3", "‡∏°.2/1", "‡∏°.2/2", "‡∏°.2/3", "‡∏°.3/1", "‡∏°.3/2", "‡∏°.3/3", "‡∏°.4/1", "‡∏°.4/2", "‡∏°.4/3", "‡∏°.5/1", "‡∏°.5/2", "‡∏°.5/3", "‡∏°.6/1", "‡∏°.6/2", "‡∏°.6/3"].map((level) => (
                        <option key={level} value={level}>
                            {level}
                        </option>
                    ))}
                </select>

                <button className="submit-button" type="submit">
                    ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
                </button>
                <div style={{ marginTop: '20px' }}>
                    <label htmlFor="excelUpload" className="submit-button" style={{ cursor: 'pointer' }}>
                        üì• ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Excel
                    </label>
                    <input
                        type="file"
                        id="excelUpload"
                        accept=".xlsx, .xls"
                        onChange={handleFileUpload}
                        style={{ display: 'none' }}
                    />
                </div>

            </form>
        </div>
    );
};

export default AddStudents;
